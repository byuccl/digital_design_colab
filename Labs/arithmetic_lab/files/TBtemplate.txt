#define MODULE V${MODULE}
${CLKDEF}
#include"V${MODULE}.h"
#include<cmath>
#include"verilated.h"
#include<iostream>
#include<fstream>
#include<bitset>
#include<iomanip>
#include<string>

#if VM_TRACE
#include <verilated_vcd_c.h>
#include <sys/stat.h>  // mkdir
#endif

#ifndef TESTBENCH_H
#define TESTBENCH_H
#endif

/**
 *  \brief     MODULE.h file for verilator object
 *  \details   enable easier access to manipulating verilator object by main.cpp
 *  \author    Reilly McKendrick, generated by verilator.py
 *  \date      2019
 */

class TestBench {
 public:
  int time;
  MODULE *top;
  #if VM_TRACE
  VerilatedVcdC *tfp = NULL;
  #endif
  //BEN  std::string inputs[];
  
  TestBench(bool in) : time(0), top(new MODULE) {
    /*!
     * Initializes HDL module and ensures that at time 0, clk is high
     * @param[in]  in  whether or not tracing was enabled from the command line
     */
    #if VM_TRACE
    // If verilator was invoked with --trace argument,
    // and if at run time passed the +trace argument, turn on tracing
      
    if (in) {   //enable tracing
      Verilated::traceEverOn(true);  // Verilator must compute traced signals
      VL_PRINTF("Enabling waves into logs/vlt_dump.vcd...\n");
      tfp = new VerilatedVcdC;
      top->trace(tfp, 99);  // Trace 99 levels of hierarchy
      mkdir("logs", 0777);
      tfp->open("logs/vlt_dump.vcd");  // Open the dump file
    }
    #endif

    setCLK(0);
  }

  void setCLK(int val) {
    #ifdef CLK
    CLK = val;
    #endif
  }

  ~TestBench() {
      #if VM_TRACE
      if (tfp) { tfp->close(); tfp = NULL; }
      #endif
      delete top;
      top = NULL;
  }

  void evalDumpAdvance(int mult = 1) {
    eval();
    vcdDump();
    //    std::cout << "Time: " << time << " clk = " << CLK << std::endl;
    time += mult;
  }

  void toggleClk(size_t toggles = 1, int clockDef = 1) {
    /*!
     * Toggles the clock
     * @param[in] toggles The number of times to toggle the clock
     */
    if (clockDef) {
      // When called, we are just at the falling edge
      setCLK(0);
      evalDumpAdvance(1);
      for (size_t i = 0; i < (toggles - 1); ++i) { 
        setCLK(1); //toggle the clock signal
        evalDumpAdvance(1);
        setCLK(0); //toggle the clock signal
        evalDumpAdvance(1);
      }
      setCLK(1); //toggle the clock signal
      evalDumpAdvance(1);
    }
    else {
      for (size_t i = 0;i<toggles;i++)
        evalDumpAdvance(1);
    }
  }

  void eval() {
    top->eval();
  } 

    bool done() {
    return Verilated::gotFinish();
  } 

  //! dumps to vcd File if enabled
  void vcdDump() {
    #if VM_TRACE
    if (tfp) tfp->dump (time);
    #endif
    //std::cout << "vcdDump at time: " << time << "\n";
  }

  void printIOs() {
    std::cout << "time is: " << time << std::endl;
    
    // Print IOs
${IOPRINTS}

    // Will do nothing unless method below is filled in
    printInternalIOs();
  }

  void printInternalIOs() {
    ${INTERNALIOPRINTS}
  }
}; // class TestBench

